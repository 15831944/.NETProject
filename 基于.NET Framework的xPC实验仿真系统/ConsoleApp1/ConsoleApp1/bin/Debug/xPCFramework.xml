<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xPCFramework</name>
    </assembly>
    <members>
        <member name="T:MathWorks.xPCTarget.xpc.xPCApplicationObject">
            <summary>
            Provides base implementation for child Application objects to reference its parent Application
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.xpc.xPCObject">
             <summary>
             This is the main base class for the xPC Target classes.
             </summary>
            
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.xpc.xPCApplicationObject.Application">
            <summary>
            Returns a reference to the parent Application object.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCAppLogger">
            <summary>
            Place holder to access specific types of application Loggers.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCAppLogger.LogMode">
            <summary>
            Controls which data points are logged
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCAppLogger.StateLog">
            <summary>
            Returns a reference to the xPCStateLogger object.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCAppLogger.OutputLog">
            <summary>
            Returns a reference to the xPCOutputLogger object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCAppLogger.TimeLog">
            <summary>
            Return a reference to the xPCTimeLogger object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCAppLogger.TETLog">
            <summary>
            Returns a reference to the xPCTETLogger object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCAppLogger.MaxLogSamples">
            <summary>
            Gets maximum number of samples that can be in log buffer
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCAppLogger.LogModeValue">
            <summary>
            Sets the value-equidistant logging. 
            Set the value to the difference in signal values.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCLog">
            <summary>
            Base xPCLog class
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCLog.IsEnabled">
            <summary>
            Gets whether logging is enabled or disabled.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCLog.NumLogSamples">
            <summary>
            Gets number of samples in log buffer
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCLog.NumLogWraps">
            <summary>
            Gets number of times log buffer wraps
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCStateLogger">
            <summary>
            Class provides an interface to the state log.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCStateLogger.Item(System.Int32)">
            <summary>
            Gets a reference to an xPCLoggingObject corresponding to the state index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCStateLogger.NumStates">
            <summary>
            Gets the number of states
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCStateLogger.IsEnabled">
            <summary>
            Gets whether logging is enabled or disabled.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCStateLogger.DataLoggingObjects">
            <summary>
            Gets a collection of the xPCDataLoggingObject items available for state logging
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCOutputLogger">
            <summary>
            Class provides an interface to the output log
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCOutputLogger.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject"/> specified by its index.
            </summary>
            <param name="index">The index to the specified logging object</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject"/></returns>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCOutputLogger.NumOutputs">
            <summary>
            Gets the count of available output logs.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCOutputLogger.IsEnabled">
            <summary>
            Gets the status of Output log
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCOutputLogger.DataLoggingObjects">
            <summary>
            Gets the entire Output log as a ListOf <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject"/>
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCTimeLogger">
            <summary>
            Class provides an interface to the output log
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTimeLogger.DataLogObject">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject"/> of the time log.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTimeLogger.IsEnabled">
            <summary>
            Gets the status of time log.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCTETLogger">
            <summary>
            Class provides an interface to the TET log
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTETLogger.DataLogObject">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject"/> for the TET log.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTETLogger.IsEnabled">
            <summary>
            Gets the status of TET log
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPClogType">
            <summary>
            Specifies the logging type Values
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPClogType.OUTPUTLOG">
            <summary>
            Output
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPClogType.STATELOG">
            <summary>
            State
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPClogType.TIMELOG">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPClogType.TETLOG">
            <summary>
            TET
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCApplication">
            <summary>
            Provides access to the Application loaded on a Target PC
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.xpc.xPCBaseNotification">
            <summary>
            This class provides the base implementation for Property Event Notification
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCBaseNotification.m_PropertyChanging">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCBaseNotification.m_PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCBaseNotification.m_propertyEventSuspendCount">
            <summary>
            Holds the suspension count for the <see cref="E:MathWorks.xPCTarget.xpc.xPCBaseNotification.PropertyChanged"/>
            and <see cref="E:MathWorks.xPCTarget.xpc.xPCBaseNotification.PropertyChanging"/> events. When 0, then the
            events are not suspended.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseNotification.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseNotification.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            Name of the property that changed.
            </param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseNotification.OnPropertyChanged(MathWorks.xPCTarget.FrameWork.PropertyNotificationEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="e">
            The <see cref="T:MathWorks.xPCTarget.FrameWork.PropertyNotificationEventArgs"/> instance
            containing the event data.
            </param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseNotification.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:MathWorks.xPCTarget.xpc.xPCBaseNotification.PropertyChanged"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">
            The <see cref="T:MathWorks.xPCTarget.FrameWork.PropertyNotificationEventArgs"/> instance
            containing the event data.
            </param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseNotification.OnPropertyChanging(System.String,System.Object,System.Object)">
            <summary>
            Raises the <see cref="E:MathWorks.xPCTarget.xpc.xPCBaseNotification.PropertyChanging"/> event.
            </summary>
            <param name="propertyName">
            Name of the property that is changing.
            </param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns><c>true</c> if the change can continue; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseNotification.OnPropertyChanging(MathWorks.xPCTarget.FrameWork.CancelPropertyNotificationEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanging"/> event.
            </summary>
            <param name="e">
            The <see cref="T:MathWorks.xPCTarget.FrameWork.CancelPropertyNotificationEventArgs"/> instance
            containing the event data.
            </param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseNotification.OnPropertyChanging(System.Object,MathWorks.xPCTarget.FrameWork.CancelPropertyNotificationEventArgs)">
            <summary>
            Raises the <see cref="E:MathWorks.xPCTarget.xpc.xPCBaseNotification.PropertyChanging"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">
            The <see cref="T:MathWorks.xPCTarget.FrameWork.CancelPropertyNotificationEventArgs"/> instance
            containing the event data.
            </param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseNotification.SetProperty``1(System.String,``0@,``0)">
            <summary>
            
            
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyField">The property field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseNotification.CheckPropertyChanged``1(``0,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseNotification.SuspendPropertyEvents">
            <summary>
            Suspends notification
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseNotification.ResumePropertyEvents">
            <summary>
            Resumes notification
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.xpc.xPCBaseNotification.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.xpc.xPCBaseNotification.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.xpc.xPCBaseNotification.IsPropertyEventsSuspended">
            <summary>
            Gets the Notificatian status
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCApplication.Start">
            <summary>
            Starts the simulation
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCApplication.Stop">
            <summary>
            Stops the simulation
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception> 
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.Target">
            <summary>
            Gets a reference to the parent xPCTargetPC object.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.Name">
            <summary>
            Gets the current Name of the loaded application 
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.CPUOverload">
            <summary>
             Gets the status indicating where there is a CPUOverload or not
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.AverageTeT">
            <summary>
            Gets the average task execution time.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.MaximumTeT">
            <summary>
            Gets the maximum task execution time and the time at which the maximum TET was achieved in.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.MinimumTeT">
            <summary>
            Gets the minimum task execution time and the the time at which the minimum TET was achieved in.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.Status">
            <summary>
            Gets the simulation status
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.SampleTime">
            <summary>
            Gets or Sets the Sample time
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.StopTime">
            <summary>
            Gets and Sets the Stop Time
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.ExecTime">
            <summary>
            Get the execution time.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.Logger">
            <summary>
            Gets a reference to the application <see cref="T:MathWorks.xPCTarget.FrameWork.xPCAppLogger"/> container object.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.Scopes">
            <summary>
            Gets a reference to the application <see cref="T:MathWorks.xPCTarget.FrameWork.xPCScopes"/> container object.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.Signals">
            <summary>
            Gets a reference to the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignals"/> Container object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCApplication.Parameters">
            <summary>
            Gets a reference to the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCParameters"/>  object
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCApplication.Starting">
            <summary>
            Occurs before simulation starts from issuing a start command
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCApplication.Started">
            <summary>
            Occurs after simulated started from issuing a stop command
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCApplication.Stopping">
            <summary>
            Occurs before simulation stopped from issuing a stop command
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCApplication.Stopped">
            <summary>
             Occurs before simulation stopped from issuing a stop command
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.xpc.IxPCApplicationObject">
            <summary>
            Provides an interface to get the parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCApplication"/> object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.xpc.IxPCApplicationObject.Application">
            <summary>
            Gets the parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCApplication"/> object
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.xpc.IxPCScopeObject">
            <summary>
            Provides an interface to get the parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCScope"/> object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.xpc.IxPCScopeObject.Scope">
            <summary>
            Gets the parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCScope"/> object.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.xpc.xPCApplicationNotficationObject">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCApplicationNotficationObject.m_app">
            <summary>
            
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.xpc.xPCApplicationNotficationObject.Application">
            <summary>
            Gets the parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCApplication"/>
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.IxPCDataSetProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.IxPCDataServiceAsync">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.IxPCDataServiceAsync.GetDataAsync">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.IxPCDataServiceAsync.GetDataAsync(System.Object)">
            <summary>
            
            </summary>
            <param name="taskID"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.IxPCDataServiceAsync.CancelAsync">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.IxPCDataServiceAsync.CancelAsync(System.Object)">
            <summary>
            
            </summary>
            <param name="taskID"></param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.IxPCDataService">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.IxPCDataService.GetData">
            <summary>
            Provides a service to GetData
            </summary>
            <returns></returns>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.GetLogDataCompletedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject.GetDataCompleted"/> event of a <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject"/>
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:MathWorks.xPCTarget.FrameWork.GetLogDataCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.GetHostScSignalDataCompletedEventHandler">
            <summary>
             Represents the method that will handle the <see cref="E:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.GetDataCompleted"/> event of a <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject"/>
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:MathWorks.xPCTarget.FrameWork.GetHostScSignalDataObjectCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.GetFileScSignalDataCompletedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:MathWorks.xPCTarget.FrameWork.xPCDataFileScSignalObject.GetDataCompleted"/> event of a <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataFileScSignalObject"/>
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:MathWorks.xPCTarget.FrameWork.GetFileScSignalDataObjectCompletedEventArgs"/> containing the event data.</param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.GetDataCompletedEventArgs">
            <summary>
            Base class
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.GetDataCompletedEventArgs.m_data">
            <summary>
            Data buffer containing the logged data
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.GetDataCompletedEventArgs.#ctor(System.Double[]@,System.Exception,System.Boolean,System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="exception"></param>
            <param name="canceled"></param>
            <param name="state"></param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.GetDataCompletedEventArgs.State">
            <summary>
            
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.GetLogDataCompletedEventArgs">
            <summary>
            Provide data to a <see cref="E:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject.GetDataCompleted"/> event for an instance of an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject"/> object.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.GetLogDataCompletedEventArgs.#ctor(System.Int32,MathWorks.xPCTarget.FrameWork.xPClogType,System.Double[]@,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.GetLogDataCompletedEventArgs"/> class. 
            </summary>
            <param name="index">The log id</param>
            <param name="type">The log type.<see cref="T:MathWorks.xPCTarget.FrameWork.xPClogType"/></param>
            <param name="data">A reference to the data.</param>
            <param name="exception">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="state">The optional user-supplied state object passed to the GetDataAsync method.</param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.GetLogDataCompletedEventArgs.LoggedData">
            <summary>
            Gets the logged data
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.GetLogDataCompletedEventArgs.Index">
            <summary>
            Returns the log index
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.GetLogDataCompletedEventArgs.LogType">
            <summary>
            Returns the log type <see cref="T:MathWorks.xPCTarget.FrameWork.xPClogType"/>
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.GetHostScSignalDataObjectCompletedEventArgs">
            <summary>
            Provide data to GetDataCompleted event for an instance of an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject"/> object.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.GetHostScSignalDataObjectCompletedEventArgs.#ctor(MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal,System.Double[]@,System.Exception,System.Boolean,System.Object)">
            <summary>
             Provide data to a <see cref="E:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.GetDataCompleted"/> event for an instance of an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject"/> object.
            </summary>
            <param name="signal">An instance to the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/> object</param>
            <param name="data">The signal data collected from its contained parent host scope  </param>
            <param name="exception">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="state">The optional user-supplied state object passed to the GetDataAsync method.</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.GetHostScSignalDataObjectCompletedEventArgs.#ctor(MathWorks.xPCTarget.FrameWork.xPCHostScope,System.Double[]@,System.Exception,System.Boolean,System.Object)">
            <summary>
            Provide data to a <see cref="E:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.GetDataCompleted"/> event for an instance of an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject"/> object.
            </summary>
            <param name="sc">An instance to the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScope"/> object</param>
            <param name="data">The time stamp data collected from its contained parent host scope </param>
            <param name="exception">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="state">The optional user-supplied state object passed to the GetDataAsync method.</param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.GetHostScSignalDataObjectCompletedEventArgs.Data">
            <summary>
            Gets the signal data collected by the Host Scope
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.GetHostScSignalDataObjectCompletedEventArgs.IsScopeSignal">
            <summary>
            Gets whether the signal is a scope signal(true) or a time signal(false)
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.GetHostScSignalDataObjectCompletedEventArgs.ScopeSignalObject">
            <summary>
            Gets the reference to its parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/> object
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.GetFileScSignalDataObjectCompletedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.GetFileScSignalDataObjectCompletedEventArgs.#ctor(MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal,System.Double[]@,System.Exception,System.Boolean,System.Object)">
            <summary>
            
            </summary>
            <param name="signal"></param>
            <param name="data"></param>
            <param name="exception"></param>
            <param name="canceled"></param>
            <param name="state"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.GetFileScSignalDataObjectCompletedEventArgs.#ctor(MathWorks.xPCTarget.FrameWork.xPCFileScope,System.Double[]@,System.Exception,System.Boolean,System.Object)">
            <summary>
            
            </summary>
            <param name="sc"></param>
            <param name="data"></param>
            <param name="exception"></param>
            <param name="canceled"></param>
            <param name="state"></param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.GetFileScSignalDataObjectCompletedEventArgs.Data">
            <summary>
            Gets the signal data collected by the File Scope
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.GetFileScSignalDataObjectCompletedEventArgs.IsScopeSignal">
            <summary>
            Gets whether the signal is a scope signal(true) or a time signal(false)
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.GetFileScSignalDataObjectCompletedEventArgs.FileScopeSignalObject">
            <summary>
            Gets the reference to its parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/> object
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject">
            <summary>
            Represent the object that holds the logged data.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject.GetDataAsync">
            <summary>
            Retrieves the logged data from the target PC without blocking the calling thread.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject.GetDataAsync(System.Object)">
            <summary>
            Retrieves the logged data from the target PC without blocking the calling thread.
            </summary>
            <param name="taskId">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject.CancelAsync">
            <summary>
            Cancels a pending asynchronous operation.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject.CancelAsync(System.Object)">
            <summary>
            This method cancels a pending asynchronous operation.
            </summary>
            <param name="taskId">The unique application-defined identifier passed in the call to start the asynchronous operation.</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject.GetData">
            <summary>
            Copies the logged data from the target PC.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject.LogId">
            <summary>
            Gets the log index
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject.Decimation">
            <summary>
            Gets or sets the Nth value to retrieve from the log. 
            Entering 1 copies all values. Entering N copies every Nth value.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject.NumSamples">
            <summary>
            Gets and sets the number of samples to retrieve from the output log
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject.StartIndex">
            <summary>
            Gets and sets the index of the first sample to retrieve from the log.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCDataLoggingObject.GetDataCompleted">
            <summary>
            Occurs when an asynchronous GetData operation completes
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject">
            <summary>
            Represent the object that holds the Host scope data.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.GetData">
            <summary>
            Retrieves the signal data collected from the host scope.
            </summary>
            <returns>double[]</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.GetDataAsync">
             <summary>
             Begins an asynchronous request to get the signal data acquired from the host scope. This method does not block the calling thread.
             </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when this method is used by another thread.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.GetDataAsync(System.Object)">
             <summary>
             Begins an asynchronous request to get the signal data acquired from the host scope. This method does not block the calling thread.
             </summary>
             <param name="taskId">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
            <exception cref="T:System.InvalidOperationException">Occurs when this method is used by another thread.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.CancelAsync">
            <summary>
            Cancels all asynchronous operations initiated with a given userState object.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.CancelAsync(System.Object)">
            <summary>
            Cancels all asynchronous operations initiated with a given userState object.
            </summary>
            <param name="taskId">The unique application-defined identifier passed in the call to start the asynchronous operation.</param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.Decimation">
            <summary>
            Gets and sets the Nth value to retrieve from the log. 
            Entering 1 copies all values. Entering N copies every Nth value.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.NumSamples">
            <summary>
            Gets and sets the number of samples to retrieve.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.StartIndex">
            <summary>
            Gets and sets the index of the first sample to retrieve from the Scope Data.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.GetDataCompleted">
            <summary>
             Occurs when an asynchronous getdata operation completes.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject.ScopeSignalObject">
            <summary>
            Gets the parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/> object
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCDataFileScSignalObject">
            <summary>
            Represent the object that holds the logged data.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.xpc.xPCFileScopeStream">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCFileScopeStream.m_sigNames">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCFileScopeStream.m_sigList">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCFileScopeStream.m_numPoints">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCFileScopeStream.m_numSignals">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCFileScopeStream.m_scope">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCFileScopeStream.m_length">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCFileScopeStream.ReadFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataFileScSignalObject.GetData">
            <summary>
            Gets the data associated with this file scope signal object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataFileScSignalObject.GetDataAsync">
             <summary>
             Begins an asynchronous request to get the signal data acquired from the host scope. This method does not block the calling thread.
             </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when this method is used by another thread.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataFileScSignalObject.GetDataAsync(System.Object)">
             <summary>
             Begins an asynchronous request to get the signal data acquired from the host scope. This method does not block the calling thread.
             </summary>
             <param name="taskId">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
            <exception cref="T:System.InvalidOperationException">Occurs when this method is used by another thread.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataFileScSignalObject.CancelAsync">
            <summary>
            Cancels all asynchronous operations initiated with a given userState object.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDataFileScSignalObject.CancelAsync(System.Object)">
            <summary>
            Cancels all asynchronous operations initiated with a given userState object.
            </summary>
            <param name="taskId">The unique application-defined identifier passed in the call to start the asynchronous operation.</param>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCDataFileScSignalObject.GetDataCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDataFileScSignalObject.ScopeSignalObject">
            <summary>
            Gets the parent scope signal <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/> object.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.XPCProtocol">
            <summary>
            Specifies the medium used for the host target communication.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.XPCProtocol.RS232">
            <summary>
            Serial 
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.XPCProtocol.TCPIP">
            <summary>
            TCP/IP
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.XPCRS232CommPort">
            <summary>
            Values of the supported serial communication ports used for the connection on the host computer.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.XPCRS232CommPort.COM1">
            <summary>
            COM 0
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.XPCRS232CommPort.COM2">
            <summary>
            COM 1
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.XPCRS232BaudRate">
            <summary>
            Specifies the Baud rate
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.XPCRS232BaudRate.BAUD1200">
            <summary>
            1200
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.XPCRS232BaudRate.BAUD2400">
            <summary>
            2400
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.XPCRS232BaudRate.BAUD4800">
            <summary>
            4800
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.XPCRS232BaudRate.BAUD9600">
            <summary>
            9600
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.XPCRS232BaudRate.BAUD19200">
            <summary>
            19200
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.XPCRS232BaudRate.BAUD38400">
            <summary>
            38400
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.XPCRS232BaudRate.BAUD57600">
            <summary>
            57600
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.XPCRS232BaudRate.BAUD115200">
            <summary>
            115200
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCLogMode">
            <summary>
            Specifies log mode values
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCLogMode.Normal">
            <summary>
            Time-equidistant logging. Logs a data point at every time interval.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCLogMode.Value">
            <summary>
            Logs a data point only when an output signal from the OutputLog changes 
            by a specified value (increment). 
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCAppStatus">
            <summary>
            Specifies the Application Status return values.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCAppStatus.Stopped">
            <summary>
            Application is stopped.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCAppStatus.Running">
            <summary>
            Application is running.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.SCTYPE">
            <summary>
            Specifies the scope Type values
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCTYPE.HOST">
            <summary>
            Host Scope Type
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCTYPE.TARGET">
            <summary>
            File Scope
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCTYPE.FILE">
            <summary>
            File Scope Type
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.SCTRIGGERMODE">
            <summary>
            Specifies the Scope Trigger Mode Values
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCTRIGGERMODE.FREERUN">
            <summary>
            There is no trigger mode. The scope always triggers when it is ready
            to trigger, regardless of the circumstances.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCTRIGGERMODE.SOFTWARE">
            <summary>
            Only a user can trigger the scope. It is always possible for a user 
            to trigger the scope; however, if you set the scope to this trigger
            mode, user intervention is the only way to trigger the scope. 
            No other triggering is possible.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCTRIGGERMODE.SIGNAL">
            <summary>
            Signal must cross a value before the scope is triggered.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCTRIGGERMODE.SCOPE">
            <summary>
            Scope is triggered by another scope at the trigger point of the triggering scope,
            modified by the value of triggerscopesample.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.SCTRIGGERSLOPE">
            <summary>
            Specifies the Scope Trigger Slope Values
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCTRIGGERSLOPE.EITHER">
            <summary>
            The trigger slope can be either rising or falling.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCTRIGGERSLOPE.RISING">
            <summary>
            The trigger signal value must be rising when it 
            crosses the trigger value. 
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCTRIGGERSLOPE.FALLING">
            <summary>
            The trigger signal value must be falling when it 
            crosses the trigger value.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.SCDISPLAYMODE">
            <summary>
            Specifies the Target Scope Display Mode Values
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCDISPLAYMODE.NUMERICAL">
            <summary>
            Specifies Target scope Drawing mode to display numerical value.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCDISPLAYMODE.REDRAW">
            <summary>
            Specifies Target scope Drawing mode to redraw Mode
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCDISPLAYMODE.SLIDING">
            <summary>
            Specifies Target scope drawing mode to sliding Mode.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCDISPLAYMODE.ROLLING">
            <summary>
            Specifies Target scope drawing mode to rolling Mode
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.SCFILEMODE">
            <summary>
            Specifies the write mode values for when file allocation table entry is updated
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCFILEMODE.LAZY">
            <summary>
            Enables lazy write mode
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCFILEMODE.COMMIT">
            <summary>
            Enables commit write mode
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.SCSTATUS">
            <summary>
            Specifies the scope status values
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCSTATUS.WAITTOSTART">
            <summary>
            Scope is ready and waiting to start.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCSTATUS.WAITFORTRIG">
            <summary>
            After a scope is finished with the pre acquiring state, it waits for a trigger.
            If the scope does not pre acquire data, it enters the wait for trigger state.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCSTATUS.ACQUIRING">
            <summary>
            Scope is acquiring data. The scope enters this state when 
            it leaves the wait for trigger state.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCSTATUS.FINISHED">
            <summary>
            Scope is finished acquiring data when it has attained the 
            predefined limit.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCSTATUS.INTERRUPTED">
            <summary>
            The user has stopped (interrupted) the scope.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.SCSTATUS.PREACQUIRING">
            <summary>
            Scope acquires a predefined number of samples before triggering.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.IxPCDictionary`2.MergeSafe(`0,`1)">
            <summary>
            Merge is similar to the SQL merge or upsert statement.  
            </summary>
            <param name="key">Key to lookup</param>
            <param name="newValue">New Value</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.IxPCDictionary`2.RemoveSafe(`0)">
            <summary>
            This is a blind remove. Prevents the need to check for existence first.
            </summary>
            <param name="key">Key to Remove</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDictionary`2.RemoveSafe(`0)">
            <summary>
            This is a blind remove. Prevents the need to check for existence first.
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDictionary`2.MergeSafe(`0,`1)">
            <summary>
            Merge.  
            </summary>
            <param name="key">Key to lookup</param>
            <param name="newValue">New Value</param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCExceptionReason">
            <summary>
            Specifies the error reason.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ENOERR">
            <summary>
            no error
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVPORT">
            <summary>
            Invalid Port Number
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ENOFREEPORT">
            <summary>
            No free Port in C-API
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EPORTCLOSED">
            <summary>
            Port is not open
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVCOMMTYP">
            <summary>
            Invalid communcation type
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVCOMPORT">
            <summary>
            COM-port can only be 0 or 1 (COM1 or COM2)
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ECOMPORTISOPEN">
            <summary>
            COM-port is already opened
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ECOMPORTACCFAIL">
            <summary>
            COM-port access failed
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ECOMPORTWRITE">
            <summary>
            WriteFile failed while writing to COM-port"
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ECOMPORTREAD">
            <summary>
            ReadFile failed while reading from COM-port
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ECOMTIMEOUT">
            <summary>
            timeout while receiving check serial link
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVBAUDRATE">
            <summary>
            Invalid value for baudrate
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EWSNOTREADY">
            <summary>
            Winsock not ready
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVWSVER">
            <summary>
            Invalid Winsock version (1.1 needed)
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EWSINIT">
            <summary>
            WINSOCK Initialization Error
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ESOCKOPEN">
            <summary>
            Socket Open Error
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ETCPCONNECT">
            <summary>
            TCP/IP Connect Error
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVADDR">
            <summary>
            Invalid IP Address
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EFILEOPEN">
            <summary>
            Error opening file
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EWRITEFILE">
            <summary>
            LoadDLM WriteFile Error
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ETCPREAD">
            <summary>
            TCP/IP Read Error
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ETCPWRITE">
            <summary>
            TCP/IP Write error
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ETCPTIMEOUT">
            <summary>
            TCP/IP timeout while receiving data
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EPINGPORTOPEN">
            <summary>
            Error opening Ping port
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EPINGSOCKET">
            <summary>
            Ping socket error
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EPINGCONNECT">
            <summary>
            Could not connect to Ping socket
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVTFIN">
            <summary>
            Invalid value for TFinal
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVTS">
            <summary>
            Invalid value for Ts (must be between 8e-6 and 10)
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVARGUMENT">
            <summary>
            Invalid Argument
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ELOGGINGDISABLED">
            <summary>
            Logging is disabled"
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVLGMODE">
            <summary>
            Invalid Logging mode
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVLGINCR">
            <summary>
            Invalid increment for value-equidistant logging
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVLGDATA">
            <summary>
            Invalid lgdata structure
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ENODATALOGGED">
            <summary>
            No data has been logged
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVSTARTVAL">
            <summary>
            Invalid value for start"
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVNUMSAMP">
            <summary>
            Number of samples must be nonnegative
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVDECIMATION">
            <summary>
            Decimation must be positive
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ETOOMANYSAMPLES">
            <summary>
            Number of samples must be nonnegative
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVLOGID">
            <summary>
            Invalid log identifier
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ESTOPSIMFIRST">
            <summary>
            Stop simulation first
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ESTARTSIMFIRST">
            <summary>
            Start simulation first
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ERUNSIMFIRST">
            <summary>
            Run simulation first
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EUSEDYNSCOPE">
            <summary>
            Use DYNAMIC_SCOPE flag at compile time
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ETOOMANYSCOPES">
            <summary>
            Too many scopes are present
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVSCTYPE">
            <summary>
            Invalid Scope type
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ESCTYPENOTTGT">
            <summary>
            Scope Type is not Target"
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVSCIDX">
            <summary>
            Invalid Scope Index
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ESTOPSCFIRST">
            <summary>
            Stop scope first
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVSIGIDX">
            <summary>
            Invalid Signal index
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVPARIDX">
            <summary>
            Invalid parameter index
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ENOMORECHANNELS">
            <summary>
            No more channels in scope
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVTRIGMODE">
            <summary>
            Invalid trigger mode
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVTRIGSLOPE">
            <summary>
            Invalid Trigger Slope Value
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVTRSCIDX">
            <summary>
            Invalid Trigger Scope index
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVNUMSIGNALS">
            <summary>
            Too many signals in Scope
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EPARNOTFOUND">
            <summary>
            Parameter not found
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ESIGNOTFOUND">
            <summary>
            Signal not found
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ENOSPACE">
            <summary>
            Space not allocated
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EMEMALLOC">
            <summary>
            Memory allocation error
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ETGTMEMALLOC">
            <summary>
            Target memory allocation failed
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EPARSIZMISMATCH">
            <summary>
            Parameter Size mismatch
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ESIGLABELNOTUNIQUE">
            <summary>
            Ambiguous signal label(signal labels are not unique)
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ESIGLABELNOTFOUND">
            <summary>
            Signal label not found
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ETOOMANYSIGNALS">
            <summary>
            Too many signals in Scope
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ETIMELOGDISABLED">
            <summary>
            Time Logging is disabled
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ESTATELOGDISABLED">
            <summary>
            State Logging is disabled
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EOUTPUTLOGDISABLED">
            <summary>
            Output Logging is disabled
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ESCFINVALIDFNAME">
            <summary>
            Invalid filename tag used for dynamic file name
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ESCFISNOTAUTO">
            <summary>
            Autorestart must be enabled for dynamic file names
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ESCFNUMISNOTMULT">
            <summary>
            MaxWriteFileSize must be a multiple of the writesize
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ELOADAPPFIRST">
            <summary>
            Load the application first
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EUNLOADAPPFIRST">
            <summary>
            Unload the application first
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVALIDMODEL">
            <summary>
            Model name does not match saved value
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVNUMPARAMS">
            <summary>
            Invalid number of parameters
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVFILENAME">
            <summary>
            Invalid file name
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EMAXPATHALLOWED">
            <summary>
            path too long. 
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EFILEREAD">
            <summary>
            Error reading file
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EFILEWRITE">
            <summary>
            Error writing file
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EFILERENAME">
            <summary>
            Error renaming file
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVXPCVERSION">
            <summary>
            Target has an invalid version of Simulink Real-Time
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINVINSTANDALONE">
            <summary>
            Command not valid for StandAlone
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EMALFORMED">
            <summary>
            Malformed message
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.FSERROR">
            <summary>
            File System Error
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.ENNOID">
            <summary>
            Error No Reason
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCExceptionReason.EINTERNAL">
            <summary>
            Internal Error
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCException">
            <summary>
            The <see cref="T:MathWorks.xPCTarget.FrameWork.xPCException"/> class that is raised when an errors.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCException.#ctor">
            <summary>
            Initialisez a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCException"/> class.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCException.#ctor(System.String)">
            <summary>
            Initialisez a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCException.#ctor(System.String,System.Exception)">
            <summary>
            Initialisez a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCException"/> class.
            </summary>
            <param name="message">The text of the error message.</param>
            <param name="inner">A nested exception.</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialisez a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCException.#ctor(System.Int32,System.String,MathWorks.xPCTarget.FrameWork.xPCTargetPC)">
            <summary>
            Initialisez a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCException"/> class.
            </summary>
            <param name="errId">The error id</param>
            <param name="message">The text of the error message.</param>
            <param name="tgt">The instance of <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTargetPC"/> class that raised the error.</param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCException.Reason">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCExceptionReason"/> reason of the error
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCException.TargetPCObject">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTargetPC"/> object that raised the error.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCFileMode">
            <summary>
            Specifies how the target should open a file with permissions
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCFileMode.CreateWrite">
            <summary>
            Open file for writing. Discard existing contents
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCFileMode.CreateReadWrite">
            <summary>
            Open or create file for reading and writing; discard existing contents
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCFileMode.OpenRead">
            <summary>
            Open file for reading
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCFileMode.OpenReadWrite">
            <summary>
             Open (do not create) file for reading and writing
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCFileMode.AppendWrite">
            <summary>
            Open or create file for writing; append data to end of file
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCFileMode.AppendReadWrite">
            <summary>
            Open or create file for reading and writing; append data to end of file
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCFileSystemInfo">
            <summary>
            Provides the base class for both xPCFileInfo and xPCDirectoryInfo
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCFileSystemInfo.m_tgt">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCFileSystemInfo.m_FullPath">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCFileSystemInfo.m_OriginalPath">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCFileSystemInfo.m_ext">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileSystemInfo.#ctor(MathWorks.xPCTarget.FrameWork.xPCTargetPC)">
            <summary>
            Constructor, initializes a new instance of the FileSystemInfo
            </summary>
            <param name="tgt">instance of an xPCTargetPC type</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileSystemInfo.Delete">
            <summary>
            Deletes a file or directory.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileSystemInfo.CreationTime">
            <summary>
            Gets the creation time of the current FileSystemInfo object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether the file or directory exists.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileSystemInfo.Extension">
            <summary>
            Gets the string representing the extension part of the file.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileSystemInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileSystemInfo.Name">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCFileInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of FileStream objects
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileInfo.#ctor(MathWorks.xPCTarget.FrameWork.xPCTargetPC,System.String)">
            <summary>
            Initializes a new instance of the xPCFileInfo class.
            </summary>
            <param name="tgt">Instance of a <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTargetPC"/>.</param>
            <param name="fileName">The fully qualified name of the new file, or the relative file name on the target's file system.</param>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileInfo.Delete">
            <summary>
            Permanently deletes a file on the target.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileInfo.Create">
            <summary>
            Creates a file in the specified path.
            </summary>
            <returns>xPCFileStream</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileInfo.Open(MathWorks.xPCTarget.FrameWork.xPCFileMode)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="fileMode"> A FileMode constant specifying the mode (for example, OpenRead or Append) in which to open the file. </param>
            <returns>xPCFileStream</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileInfo.OpenRead">
            <summary>
            Creates a read-only xPCFileStream
            </summary>
            <returns>xPCFileStream</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileInfo.Rename(System.String)">
            <summary>
             Rename a file on the target PC FileSystem
            </summary>
            <param name="newName"></param>
            <returns>xPCFileInfo</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileInfo.CopyToHost(System.String)">
            <summary>
            Moves a specified file from the target's file system to a new location onto the host file system.
            </summary>
            <param name="HostDestFileName">The fully qualified name of the new file, or the relative file name on the host file system.</param>
            <returns>FileInfo</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
            <exception cref="T:System.ArgumentNullException"> HostDestFileName is null reference.</exception>
            <exception cref="T:System.Security.SecurityException"> The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException"> The file name is empty, contains only white spaces, or contains invalid characters. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> Access to fileName is denied. </exception>
            <exception cref="T:System.IO.PathTooLongException"> The specified path, file name, or both exceed the system-defined maximum length. </exception>
            <exception cref="T:System.NotSupportedException"> fileName contains a colon (:) in the middle of the string. </exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileInfo.Directory">
            <summary>
            Gets an instance of the parent directory.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileInfo.DirectoryName">
            <summary>
            Gets a string representing the directory's full path.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileInfo.Exists">
            <summary>
            Gets a value indicating whether a file exists.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileInfo.Name">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileInfo.Length">
            <summary>
            Gets the size, in bytes, of the current file.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current cref = "xPCFileSystemInfo" object.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo">
            <summary>
            Exposes instance methods for creating and enumerating through directories and subdirectories.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo.#ctor(MathWorks.xPCTarget.FrameWork.xPCTargetPC,System.String)">
            <summary>
            Initializes a new instance of the xPCirectoryInfo class on the specified path
            </summary>
            <param name="tgt">A reference to an xPCTargetPC object</param>
            <param name="path">A string specifying the path on which to create the xPCDirectoryInfo</param>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException"></exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo.Delete">
            <summary>
            Deletes a xPCDirectoryInfo if it is empty. 
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException"></exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo.Create">
            <summary>
            Creates a directory.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException"></exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo.GetFiles">
            <summary>
             Returns a file list from the current directory
            </summary>
            <returns>xPCFileInfo[]</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException"></exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <returns>xPCDirectoryInfo[]</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException"></exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo.GetFileSystemInfos">
            <summary>
            Returns an array of strongly typed xPCFileSystemInfo entries representing all the files and subdirectories in a directory.
            </summary>
            <returns>xPCFileSystemInfo[]</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException"></exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo.CreationTime">
            <summary>
            Gets the creation time of the current xPCDirectory object
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException"></exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo.Exists">
            <summary>
            Gets a value indicating whether the directory exists. 
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException"></exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo.Name">
            <summary>
            Gets the name of this xPCDirectoryInfo instance
            </summary>        
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo.Root">
            <summary>
            Gets the root portion of a path.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCDriveInfo">
            <summary>
            Provides access to information on a drive.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDriveInfo.#ctor(MathWorks.xPCTarget.FrameWork.xPCTargetPC,System.String)">
            <summary>
            Provides access to information on the specified drive.
            </summary>
            <param name="tgt"> An instance of an xPCTargetPC object</param>
            <param name="driveName"> A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z'. A null value is not valid. </param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCDriveInfo.Refresh">
            <summary>
            Syncoronizes the objects state
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDriveInfo.AvailableFreeSpace">
            <summary>
            Indicates the amount of available free space on a drive.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDriveInfo.TotalSize">
            <summary>
            This property indicates the total size of the drive in bytes, not just what is available to the current user.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDriveInfo.DriveFormat">
            <summary>
            Gets the name of the file system, such as FAT16 or FAT32.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDriveInfo.RootDirectory">
            <summary>
            Gets the root directory of a drive.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDriveInfo.VolumeLabel">
            <summary>
            Gets the volume label of a drive.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDriveInfo.Name">
            <summary>
            Gets the name of a drive.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDriveInfo.SerialNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDriveInfo.FirstPhysicalSector">
            <summary>
            
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCDriveInfo.FATCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCFileSystem">
            <summary>
            Provides access to FileSystem drives and directies.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory on the target's FileSystem
            </summary>
            <param name="path">The path of the directory to be created on the target file system.</param>
            <returns>An instance of <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDirectoryInfo"/></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileSystem.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application. 
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileSystem.SetCurrentDirectory(System.String)">
            <summary>
            Changes the current working directory on the target PC.
            </summary>
            <param name="path">The path to which the current working directory is set on the target</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileSystem.GetDrives">
            <summary>
            Retrieves the drive names of all logical drives on the target computer. 
            </summary>
            <returns>xPCDriveInfo[]</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileSystem.GetDrivesBasic">
            <summary>
            Retrieves the drive names of all logical drives on the target computer.
            Calling this method would not require a FAT Scan. xPCDriveInfo properties
            FreeClusters, BadClusters, Files, FileChains, FreeChains, LargestFreeChain
            will ignored.
            </summary>
            <returns>xPCDriveInfo[]</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileSystem.RemoveFile(System.String)">
            <summary>
            Removes a file from the target.
            </summary>
            <param name="fileName">The path to the file to be removed on the target</param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCFileStream">
            <summary>
            Exposes a Stream around a file.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileStream.#ctor(MathWorks.xPCTarget.FrameWork.xPCTargetPC,System.String,MathWorks.xPCTarget.FrameWork.xPCFileMode)">
            <summary>
            Initializes a new instance of the xPCFileStream class with the specified path and creation mode.
            </summary>
            <param name="tgt"> A reference to an xPCTargetPC object</param>
            <param name="path"> A relative or absolute path for the file that the current xPCFileStream object will encapsulate</param>
            <param name="fmode"> An xPCFileMode constant that determines how to open or create the file.</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count">The number of bytes read</param>
            <returns>int</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileStream.Write(System.Byte[],System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer. 
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            </summary>
            <param name="value"></param>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as file handles) associated with the current stream
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileStream.FileHandle">
            <summary>
            Gets the file handle integer value of the opened file.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="T:MathWorks.xPCTarget.xpc.xPCBaseCollection`1">
            <summary>
            Provides the base collection for xPC Collections types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseCollection`1.Add(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <param name="item"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseCollection`1.Remove">
            <summary>
            Removes all the keys and values from the collectionOf (int, T).
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseCollection`1.Remove(System.Int32)">
            <summary>
            Removes the value with the specified key from the collectionOf (int, T).
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseCollection`1.Remove(System.Int32[])">
            <summary>
            Removes the values with the specified keys from the collectionOf (int, T).
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCBaseCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collectionOf (int, T).
            </summary>
            <returns> </returns>
        </member>
        <member name="P:MathWorks.xPCTarget.xpc.xPCBaseCollection`1.Count">
            <summary>
            Gets the number of key/value pairs contained in the collectionOf (int, T).
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.xpc.xPCBaseCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="id"></param>
            <returns>TValue</returns>
        </member>
        <member name="T:MathWorks.xPCTarget.xpc.xPCScopeCollection`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.remscope(System.Int32)">
            <summary>
            
            </summary>
            <param name="scopeId"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.GetNextId">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.getscopesList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.getsctypeList(System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.getHiddenscopesList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.getobjectList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.onFireAddedEvent(System.Object,MathWorks.xPCTarget.FrameWork.xPCScope)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="sc"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.onFireRemovedEvent(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="scopeId"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.removeStaleObject(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.Remove">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.Remove(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.Remove(System.Int32[])">
            <summary>
            
            </summary>
            <param name="arrayOfIds"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.Refresh">
            <summary>
            Refresh
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.Added">
            <summary>
            Occurs when a scope is added.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.Removed">
            <summary>
            Occurs when a scope is removed.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.xpc.xPCScopeCollection`1.Application">
            <summary>
            Returns the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCApplication"/> object.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1">
            <summary>
            Provides the base scope Collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.m_scope">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.remscsignal(System.Int32)">
            <summary>
            remove signal from scope
            </summary>
            <param name="sigIdx">The signal ids representing the signal</param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.onFireAddedEvent(System.Object,MathWorks.xPCTarget.FrameWork.xPCScopeSignal)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="sig"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.onFireRemovedEvent(System.Object,MathWorks.xPCTarget.FrameWork.xPCSignal)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="sig"></param>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.m_AddedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.m_RemovedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.getscsigList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.getobjectList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.Remove">
            <summary>
            Removes all signal items from the collection
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.Remove(System.Int32)">
            <summary>
            Removes a signal item from the collection
            </summary>
            <param name="sigIdx">The signal ids representing the signal</param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.Remove(System.Int32[])">
            <summary>
            Removes the signal items from the collection
            </summary>
            <param name="sigIds">An array of signal ids representing the signals</param>
        </member>
        <member name="M:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.Refresh">
            <summary>
            Refreshes the collection
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.Added">
            <summary>
            Occurs when a signal is added to the collection
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.Removed">
            <summary>
            Occurs when a signal is removed from the collection
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.xpc.xPCScopeSignalCollection`1.Scope">
            <summary>
            returns the parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCScope"/> object.
            
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeCollection">
            <summary>
            Represents a collection of xPCHostScope objects.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCHostScopeCollection.Add">
            <summary>
            Creates an xPCHostScope object with the next available scopeId as its key
            </summary>
            <returns>xPCHostScope</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCHostScopeCollection.Add(System.Int32)">
            <summary>
            Creates an xPCHostScope object specified with the scopeid as its key.
            </summary>
            <param name="id"></param>
            <returns>xPCHostScope</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCHostScopeCollection.Add(System.Int32[])">
            <summary>
            Creates as many xPCHostScope objects specified with the ids as its keys
            </summary>
            <param name="arrayOfIds"></param>
            <returns>IListof <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScope"/></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCHostScopeCollection.Refresh">
            <summary>
            Refreshes the state of the object.         
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCHostScopeCollection.StartAll">
            <summary>
            Start all scopes in the collection
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCHostScopeCollection.StopAll">
            <summary>
            Stop all scopes in the collection
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCTargetScopeCollection">
            <summary>
            Represents a collection of xPCTargetScope objects.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetScopeCollection.Add">
            <summary>
            Creates an xPCTargetScope object with the next available scopeId as its key
            </summary>
            <returns>xPCTargetScope</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetScopeCollection.Add(System.Int32)">
            <summary>
            Creates an xPCTargetScope object specified with the scopeid as its key.
            </summary>
            <param name="id"></param>
            <returns>xPCTargetScope</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetScopeCollection.Add(System.Int32[])">
            <summary>
            Creates as many xPCTargetScope objects specified with the ids as its keys
            </summary>
            <param name="arrayOfIds"></param>
            <returns>IListof <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTargetScope"/></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetScopeCollection.Refresh">
            <summary>
            Synchronizes with scopes on the target
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetScopeCollection.StartAll">
            <summary>
            Start all Target Scopes in one call
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetScopeCollection.StopAll">
            <summary>
            Stops all host scopes in one shot
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeCollection">
            <summary>
             Represents a collection of xPCFileScope objects.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileScopeCollection.Add">
            <summary>
            Creates an xPCFileScope object with the next available scopeId as its key
            </summary>
            <returns>xPCTargetScope</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileScopeCollection.Add(System.Int32)">
            <summary>
            Creates an xPCFileScope object specified with the scopeid as its key.
            </summary>
            <param name="id"></param>
            <returns>xPCTargetScope</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileScopeCollection.Add(System.Int32[])">
            <summary>
            Creates as many xPCFileScope objects specified with the ids as its keys
            </summary>
            <param name="arrayOfIds"></param>
            <returns>IListof <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTargetScope"/></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileScopeCollection.Refresh">
            <summary>
            Synchronizes with the signals for the associated scope on the target.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileScopeCollection.StartAll">
            <summary>
            Start all File Scopes one after the other in one call
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileScopeCollection.StopAll">
            <summary>
            Stops all File scopes in one shot
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCInvisibleScopeCollection.GetNextId">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCInvisibleScopeCollection.Add">
            <summary>
            Creates an xPCHostScope object with the next available scopeId as its key
            </summary>
            <returns>xPCHostScope</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCInvisibleScopeCollection.Add(System.Int32)">
            <summary>
            Creates an xPCHostScope object specified with the scopeid as its key.
            </summary>
            <param name="id"></param>
            <returns>xPCHostScope</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCInvisibleScopeCollection.Refresh">
            <summary>
            Refreshes the state of the object.         
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCInvisibleScopeCollection.StartAll">
            <summary>
            Start all scopes in the collection
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCInvisibleScopeCollection.StopAll">
            <summary>
            Stop all scopes in the collection
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignalCollection">
            <summary>
            Represents a collection of <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/> objects.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignalCollection.Add(System.Int32)">
            <summary>
            Adds a signal to the Host scope and creates an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/> object specified by the signal Id.
            </summary>
            <param name="sigId">The signal Id</param>
            <returns>An instance of an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/></returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignalCollection.Add(System.Int32[])">
            <summary>
            Adds and creates as many <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/> objects specified by the signal Ids.
            </summary>
            <param name="sigIds">An array containing signals Ids</param>
            <returns>A List of <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignalCollection.Add(MathWorks.xPCTarget.FrameWork.xPCSignal)">
            <summary>
            Adds a signal to the Host scope and creates an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/>  object specified by an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> object.
            </summary> 
            <param name="signal">The <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> object representing the actual signal </param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/></returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignalCollection.Add(System.String)">
            <summary>
            Adds a signal to the Host scope and creates an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/> object specified by a signal's name (block path).
            </summary>
            <param name="blkpath">The signal name (block path). </param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/></returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignalCollection.Refresh">
            <summary>
            Synchronizes with the signals for the associated scope on the target.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignalCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/> object from the signal name (blkpath)
            </summary>
            <param name="blkpath">A signal name representing a signal object added to its parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScope"/> object</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/></returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCTargetScopeSignalCollection">
            <summary>
            Represents a collection of <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal"/> objects.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetScopeSignalCollection.Add(System.Int32)">
            <summary>
            Adds a signal to the Target scope and creates a <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal"/> object specified by the signal Id.
            </summary>
            <param name="sigId">The signal id representing the actual signal</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal"/>The target scope signal object</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetScopeSignalCollection.Add(System.String)">
            <summary>
            Adds a signal to the Target scope and creates an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal"/> object specified by a signal's name (block path).
            </summary>
            <param name="blkPath">The signal's name of the block path representing the actual signal</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal"/>The target scope signal object</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetScopeSignalCollection.Add(System.Int32[])">
            <summary>
            Adds and creates as many <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal"/> objects specified by the signal Ids.
            </summary>
            <param name="sigIds">An array of signal Ids representing the actual signals</param>
            <returns>IList of <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal"/> The target scope signal object.</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetScopeSignalCollection.Add(MathWorks.xPCTarget.FrameWork.xPCSignal)">
            <summary>
            Adds a signal to the Target scope and creates a <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal"/> objects specified by an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> object.
            </summary>
            <param name="signal">The <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> object representing the actual signal</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal"/>The target scope signal object.</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetScopeSignalCollection.Refresh">
            <summary>
            Synchronizes with the signals for the associated scope on the target.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetScopeSignalCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal"/> object from the signal name (blkpath)
            </summary>
            <param name="blkpath">A signal name representing a signal object added to its parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTargetScope"/> object</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal"/></returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignalCollection">
            <summary>
            Represents a collection of <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/> objects.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignalCollection.Add(System.Int32)">
            <summary>
            Adds a signal to the File scope and creates a <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/> object specified by the signal Id.
            </summary>
            <param name="sigId">The signal id representing the actual signal</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/>The file scope signal object</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignalCollection.Add(System.Int32[])">
            <summary>
             Adds signals to the File scope and creates as many <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/> objects specified by the signal Ids.
            </summary>
            <param name="sigIds">An array of signal Ids representing the actual signals</param>
            <returns>IList of <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/> objects.</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignalCollection.Add(MathWorks.xPCTarget.FrameWork.xPCSignal)">
            <summary>
            Adds a signal to the File scope and creates a <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/> objects specified by an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> object.
            </summary>
            <param name="signal">The <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> object representing the actual signal</param>
            <returns> <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/> The file scope signal object</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignalCollection.Add(System.String)">
            <summary>
            Adds a signal to the File scope and creates an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/> object specified by a signal's name (block path).
            </summary>
            <param name="blkPath"> The signal's name of the block path representing the actual signal.</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/>The file scope signal object</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignalCollection.Refresh">
            <summary>
            Synchronizes with the signals for the associated scope on the target.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignalCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/> object from the signal name (blkpath)
            </summary>
            <param name="blkpath">A signal name representing a signal object added to its parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScope"/> object</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/> The file scope signal object</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCScopeCollectionEventArgs">
            <summary>
            Provides data for the specific scope type collection Added event
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCScopeCollectionEventArgs.#ctor(MathWorks.xPCTarget.FrameWork.xPCScope)">
            <summary>
            Initializes a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCScopeCollectionEventArgs"/>
            </summary>
            <param name="scope"> The Scope object which has been added</param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScopeCollectionEventArgs.Scope">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCScope"/> object which has been added.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCScopeRemCollectionEventArgs">
            <summary>
            Provides data for a specific scope type collection Removed event
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCScopeRemCollectionEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCScopeRemCollectionEventArgs"/>
            </summary>
            <param name="scopeId"></param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScopeRemCollectionEventArgs.ScopeNumber">
            <summary>
            The scope number belonging to the scope in which has been removed.
            </summary>
        </member>
        <member name="T:xPCFramework.src.xPCFileScopeDataReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:xPCFramework.src.xPCFileScopeDataReader.ReadFile(System.IO.FileInfo)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:xPCFramework.src.xPCFileScopeDataSignalCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:xPCFramework.src.xPCFileScopeDataSignalCollection.isEqualName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:xPCFramework.src.xPCFileScopeDataSignalCollection.NumSignals">
            <summary>
            
            </summary>
        </member>
        <member name="P:xPCFramework.src.xPCFileScopeDataSignalCollection.Signals">
            <summary>
            
            </summary>
        </member>
        <member name="P:xPCFramework.src.xPCFileScopeDataSignalCollection.TimeSignal">
            <summary>
            
            </summary>
        </member>
        <member name="P:xPCFramework.src.xPCFileScopeDataSignalCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="blockPath"></param>
            <returns></returns>
        </member>
        <member name="P:xPCFramework.src.xPCFileScopeDataSignalCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:xPCFramework.src.xPCSignalDataInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:xPCFramework.src.xPCSignalDataInfo.GetData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:xPCFramework.src.xPCSignalDataInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.xpc.IxPCPropertyNotification">
            <summary>
            Notifies clients that a property value is changing or changed.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.xpc.IxPCPropertyNotification.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.CancelPropertyNotificationEventArgs">
            <summary>
            Class allows for cancelling of the associated event
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.PropertyNotificationEventArgs">
            <summary>
            Stores old and new values of the changed property.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.PropertyNotificationEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:MathWorks.xPCTarget.FrameWork.PropertyNotificationEventArgs"/> class.
            </summary>
            <param name="propertyName">
            The name of the property that is associated with this
            notification.
            </param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.PropertyNotificationEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the
            <see cref="T:MathWorks.xPCTarget.FrameWork.PropertyNotificationEventArgs"/> class.
            </summary>
            <param name="propertyName">
            The name of the property that is associated with this
            notification.
            </param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.PropertyNotificationEventArgs.newValue">
            <summary>
            Holds the new value of the property.
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.PropertyNotificationEventArgs.oldValue">
            <summary>
            Holds the old value of the property.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.PropertyNotificationEventArgs.NewValue">
            <summary>
            Gets the new value of the property.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.PropertyNotificationEventArgs.OldValue">
            <summary>
            Gets the old value of the property.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.CancelPropertyNotificationEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the cref = "CancelPropertyNotificationEventArgs" class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.CancelPropertyNotificationEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the cref = "CancelPropertyNotificationEventArgs" class.
            </summary>
            <param name="propertyName"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.CancelPropertyNotificationEventArgs.Cancel">
            <summary>
            
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.PropertyChangingEventHandler">
            <summary>
            Represents the method that will handle the event raised
            when a property is changing on a component.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">
            A <see cref="T:CancelPropertyNotificationEventArgs"/> that contains the event
            data.
            </param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCParameter">
            <summary>
            Represents a run time tunable parameter.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCParameter.OnGetParamCompleted(MathWorks.xPCTarget.FrameWork.GetParamCompletedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCParameter.OnSetParamCompleted(MathWorks.xPCTarget.FrameWork.SetParamCompletedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCParameter.GetParam">
            <summary>
            Get the param values. 
            </summary>
            <returns>double[]</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCParameter.GetParamAsync">
            <summary>
            Begins an asynchronous request to get the parameter values from the target PC. This method does not block the calling thread.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when this method is used by another thread.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCParameter.GetParamAsync(System.Object)">
             <summary>
             Begins an asynchronous request to get the parameter values from the target PC. This method does not block the calling thread.
             </summary>
             <param name="taskId">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
            <exception cref="T:System.InvalidOperationException">Occurs when this method is used by another thread.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCParameter.SetParam(System.Double[])">
            <summary>
            Sets the value parameters
            </summary>
            <param name="values"> An array with at least the correct size. </param>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCParameter.SetParamAsync(System.Double[])">
             <summary>
             Begins an asynchronous request to set the parameter values on the target PC. This method does not block the calling thread.
             </summary>
             <param name="values"> A vector of with at least the correct size.</param>
            <exception cref="T:System.InvalidOperationException">Occurs when this method is used by another thread.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCParameter.SetParamAsync(System.Double[],System.Object)">
            <summary>
            Begins an asynchronous request to set the parameter values on the target PC. This method does not block the calling thread.
            </summary>
            <param name="values">A vector of with at least the correct size.</param>
            <param name="taskId">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCParameter.CancelAsync(System.Object)">
            <summary>
            Cancels all asynchronous operations initiated with a given userState object.
            </summary>
            <param name="taskId">The unique application-defined identifier passed in the call to start the asynchronous operation.</param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCParameter.ParameterId">
            <summary>
            Gets the numerical index(ID) mapping to an instance of an xPCParameter object that represents a run time parameter)
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCParameter.BlockPath">
            <summary>
            Gets the BlockPath of the parameter to an instance of an xPCParameter
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCParameter.Name">
            <summary>
            Gets the Parameter Name of the parameter to an instance of an xPCParameter
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCParameter.DataType">
            <summary>
            Gets the Simulink type as a string of the parameter to an instance of an xPCParameter
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCParameter.Dimensions">
            <summary>
            Gets an array containing elements of dimension lengths
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCParameter.Rank">
            <summary>
            Gets the number of dimensions of the parameter
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCParameter.Value">
            <summary>
            Gets and sets the parameter value.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.</exception>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCParameter.SetParamCompleted">
            <summary>
            Occurs when an asynchronous setparam operation completes.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCParameter.GetParamCompleted">
            <summary>
            Occurs when an asynchronous getparam operation completes.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCParameters">
            <summary>
            Represents a place holder to access run time parameters
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCParameters.Refresh">
            <summary>
            Refreshes the state of the object. 
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCParameters.SaveParameterSet(System.String)">
            <summary>
            Save parameter values of target application in the file specified by fileName
            </summary>
            <param name="fileName">The name of the file on the target PC file system to contain the saved parameters.</param>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCParameters.LoadParameterSet(System.String)">
            <summary>
            Restores the target application parameter values to those values saved in the file fileName.
            </summary>
            <param name="fileName">The name of the file on the target pc file system that contains the saved parameters.</param>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCParameters.NumParameters">
            <summary>
            Retuns the total number of tunable parameters available in the application.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCParameters.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCParameter"/> object with the specified parameter identifier.
            </summary>
            <param name="paramIdx">The parameter identifier reresenting the actual parameter</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCParameter"/>The <see cref="T:MathWorks.xPCTarget.FrameWork.xPCParameter"/> object representing the actual parameter</returns>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCParameters.Item(System.String,System.String)">
            <summary>
            the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCParameter"/> object with the specified block path and parameter name.
            </summary>
            <param name="blkName">The block path of the actual block containing the parameter</param>
            <param name="paramName">The parameter name of the actual parameter</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCParameter"/>The <see cref="T:MathWorks.xPCTarget.FrameWork.xPCParameter"/> object representing the actual parameter</returns>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.SetParamCompletedEventHandler">
            <summary>
            Represents the method that will handle the cref = "SetParamCompleted" event of a cref = "xPCTargetPC".
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.GetParamCompletedEventHandler">
            <summary>
            Represents the method that will handle the cref = "GetParamCompleted" event of a cref = "xPCTargetPC".
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.SetParamCompletedEventArgs">
            <summary>
            Provides data for the SetParamCompleted event
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.SetParamCompletedEventArgs.#ctor(System.Double[]@,System.Double[]@,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.SetParamCompletedEventArgs"/>
            </summary>
            <param name="oldValues"> A reference to old data values</param>
            <param name="newValues">A reference to the new data values</param>
            <param name="e">Any error that occurred during the asynchronous operation</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="userstate">The optional user-supplied state object passed to the "SetParamAsync" method/&gt;</param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.SetParamCompletedEventArgs.NewValue">
            <summary>
            Gets the new data values of the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCParameter"/> object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.SetParamCompletedEventArgs.OldValue">
            <summary>
            Gets the old data values of the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCParameter"/> object
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.GetParamCompletedEventArgs">
            <summary>
            Provides data for the GetParamCompleted event
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.GetParamCompletedEventArgs.#ctor(System.Double[]@,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.GetParamCompletedEventArgs"/>
            </summary>
            <param name="values"> A reference to parameter data values</param>
            <param name="e">Any error that occurred during the asynchronous operation</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="userstate">The optional user-supplied state object passed to the "GetParamAsync" method</param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.GetParamCompletedEventArgs.Result">
            <summary>
            Gets the data values of the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCParameter"/> object
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCScope">
            <summary>
            Represnets the most general type of an xPC Scope
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCScope.m_scopeId">
             <summary>
            
             </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCScope.m_type">
             <summary>
            
             </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCScope.m_ObjectLock">
             <summary>
            
             </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCScope.m_scTypeDict">
             <summary>
            
             </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCScope.m_StartingEvent">
             <summary>
            
             </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCScope.m_StartedEvent">
             <summary>
            
             </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCScope.m_StoppingEvent">
             <summary>
            
             </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCScope.m_StoppedEvent">
             <summary>
            
             </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCScope.createScope(System.String,System.Int32)">
             <summary>
            
             </summary>
             <param name="sctype"></param>
             <param name="scopeId"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCScope.createScope(System.String,System.Int32,System.Boolean)">
             <summary>
            
             </summary>
             <param name="sctype"></param>
             <param name="scopeId"></param>
             <param name="flag"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCScope.Start">
            <summary>
            Start execution of this scope on target PC.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCScope.Stop">
            <summary>
            Stop execution of scope on target PC.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCScope.Trigger">
            <summary>
            Software-trigger start of data acquisition for this scope
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScope.TriggerSignalId">
            <summary>
            Get or set the trigger signal
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScope.ScopeId">
            <summary>
            Gets the unique numeric identifier for the scope object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScope.Status">
            <summary>
            Gets the status of the scope indicating whether data is being acquired,
            the scope is waiting for a trigger, the scope has been stopped
            (interrupted), or acquisition is finished.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScope.Type">
            <summary>
            Gets the scope type as a string
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScope.Decimation">
            <summary>
            Gets or sets the decimation.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScope.NumPrePostSamples">
            <summary>
            Gets or sets the number of Pre/Post samples
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScope.NumSamples">
            <summary>
            Gets or sets the number of samples
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScope.TriggerLevel">
            <summary>
            Gets or sets the trigger level
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScope.TriggerMode">
            <summary>
            Gets or sets the scope trigger mode
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MathWorks.xPCTarget.FrameWork.xPCScope.TriggerAnySignal" -->
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScope.TriggerScopeSample">
            <summary>
            Gets or sets the scope trigger sample
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScope.TriggerScope">
            <summary>
            Get or set the trigger scope
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScope.TriggerSlope">
            <summary>
            Get or set the trigger slope
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCScope.ScopeStarting">
            <summary>
            Occurs before the scope starts
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCScope.ScopeStarted">
            <summary>
            Occures after the scope starts
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCScope.ScopeStopping">
            <summary>
            Occurs before when a scope is manually stopped
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCScope.ScopeStopped">
            <summary>
            Occurs after when a scope is manually stopped
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCHostScope">
            <summary>
            Represents an xPC scope of type Host on a target PC
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCHostScope.Signals">
            <summary>
            Gets the collection of host scope signals <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignalCollection"/> that are assigned to this scope object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCHostScope.TriggerSignal">
            <summary>
            Gets or sets the host scope signal <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/> used to trigger the scope.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCHostScope.DataTimeObject">
            <summary>
            Gets the host scope time data object <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject"/> associated with this scope.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCTargetScope">
            <summary>
            Represents an xPC scope of type Target
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetScope.Signals">
            <summary>
            Gets the collection of target scope signals <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTargetScopeSignalCollection"/> that are assigned to this scope object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetScope.Grid">
            <summary>
            Get or set the grid of the target scope
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetScope.DisplayMode">
            <summary>
            Get or set the target scope display mode <see cref="T:MathWorks.xPCTarget.FrameWork.SCDISPLAYMODE"/>
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetScope.YLimit">
            <summary>
            Get or set the target scope minimum and maximum y-axis value
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetScope.TriggerSignal">
            <summary>
            Gets or sets the target scope signal <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal"/> used to trigger the scope.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCFileScope">
            <summary>
            Represents an xPC scope of type File
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileScope.Signals">
            <summary>
            Gets the collection of file scope signals <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignalCollection"/> that are assigned to this scope object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileScope.TriggerSignal">
            <summary>
            Gets or sets the file scope signal <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/> used to trigger the scope.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileScope.FileName">
            <summary>
            Get or set the filename of the file to contain the signals data
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileScope.FileMode">
            <summary>
            Get or set the file write mode <see cref="T:MathWorks.xPCTarget.FrameWork.SCFILEMODE"/>.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileScope.WriteSize">
            <summary>
            Get or set the write size in bytes.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileScope.DataTimeObject">
            <summary>
            Gets the file scope time data object <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataFileScSignalObject"/> associated with this scope.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileScope.DynamicMode">
            <summary>
            Get or set automatic incrementing of file names.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileScope.MaxWriteFileSize">
            <summary>
            Get or set the maximum file size in bytes allowed before incrementing to the next file.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileScope.AutoRestart">
            <summary>
            Get or set the file scope autorestart.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCInvisibleScope">
            <summary>
            Represents an xPC scope of type Host on a target PC
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCInvisibleScope.Signals">
            <summary>
            Gets the collection of host scope signals <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignalCollection"/> that are assigned to this scope object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCInvisibleScope.TriggerSignal">
            <summary>
            Gets or sets the host scope signal <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/> used to trigger the scope.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCInvisibleScope.DataTimeObject">
            <summary>
            Gets the host scope time data object <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject"/> associated with this scope.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCScopes">
            <summary>
            Place holder to access specific types of xPCScope objects
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCScopes.RefreshAll">
            <summary>
            Refresh the state of the object
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCScopes.Remove(System.Int32[])">
            <summary>
            Remove scopes on target
            </summary>
            <param name="scIdxArray"></param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScopes.HostScopes">
            <summary>
            Gets the collection of Host scopes <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeCollection"/>
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScopes.TargetScopes">
            <summary>
            Gets the collection of Target scopes <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTargetScopeCollection"/>
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScopes.FileScopes">
            <summary>
            Gets the collection of File scopes <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeCollection"/>
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScopes.ScopeObjectList">
            <summary>
            Returns the entire scopes object as a list.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScopes.ScopeObjectDict">
            <summary>
            Returns the entire scopes object as a Dictionary
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCSignal">
            <summary>
            Represents an xPC Signal object.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCSignal.GetValue">
            <summary>
            Returns the value of the signal at the moment of the request.
            </summary>
            <returns>double</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCSignal.TryGetValue(System.Double@)">
            <summary>
            returns true if no error getting the signal value returned in result, otherwise false.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCSignal.BlockPath">
            <summary>
            Gets the block path (signal name) of the signal.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCSignal.SignalId">
            <summary>
            Gets a numerical identifier representing the signal object.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCSignal.Label">
            <summary>
            Gets the signal label of the signal. If there is no label
            associated with the signal an empty string is returned.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCSignal.DataType">
            <summary>
            Gets the simulink data type name
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCSignal.isWide">
            <summary>
            Gets if the signal elements is part of a wide signal
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCSignal.Width">
            <summary>
            Gets the Signal Width
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCSignal.UserData">
            <summary>
            Gets and sets a user-defined object that can be used to store and retrieve additional information.
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCSignals">
            <summary>
            Place holder to access <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> objects that are currently available by the application
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCSignals.GetSignalsIdFromLabel(System.String)">
            <summary>
            Get all signals id associated with a specific label.
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCSignals.GetSignal(System.String)">
            <summary>
            Gets a reference to an xPCSignal object which maps to a signal with the specified block path parameter.
            </summary>
            <param name="blockPath"></param>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCSignals.GetSignal(System.Int32)">
            <summary>
            Gets a reference to an xPCSignal object which maps to a signal with the specified signald parameter.
            </summary>
            <param name="signalIdx"></param>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCSignals.GetSignals(System.Int32[])">
            <summary>
             Returns a list of xPCSignal objects specified by an array of signal identifiers
            </summary>
            <param name="arrayOfSigId">An array of signal identifiers</param>
            <returns>IListof <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> objects</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCSignals.GetSignals(System.String[])">
            <summary>
             Returns a list of xPCSignal objects specified by an array containing signals block path
            </summary>
            <param name="arrayofBlockPath">An array of string containing the signals block path</param>
            <returns>IListof <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> objects</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCSignals.GetSignalsValue(System.Int32[])">
            <summary>
            Returns a vector of signal values from an array containing its signal identifiers
            </summary>
            <param name="arrayOfSigId"></param>
            <returns>double[]</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCSignals.GetSignalsValue(System.Collections.Generic.IList{MathWorks.xPCTarget.FrameWork.xPCSignal})">
            <summary>
            Returns a vector of signal values from a List containing <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> objects
            </summary>
            <param name="arrayOfSigObjs"></param>
            <returns>double[]</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCSignals.Refresh">
            <summary>
            Refreshes the state of the object. 
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCSignals.NumSignals">
            <summary>
            Gets the total numbers of signals available in the application.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCSignals.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> object specified by its signal identifier
            </summary>
            <param name="signalIdx">The signal identifier representing the actual signal</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/></returns>
            <exception cref="T:System.ArgumentNullException">signalIdx is null reference</exception>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCSignals.Item(System.String)">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> object specified by its signal name(block path)
            </summary>
            <param name="blkPath">The signal name (block path) representing the actual signal</param>
            <returns><see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/></returns>
            <exception cref="T:System.ArgumentNullException">blkPath is null reference</exception>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCScopeSignal">
            <summary>
            Provides the base class for a scope signal object
            </summary>
        </member>
        <member name="F:MathWorks.xPCTarget.FrameWork.xPCScopeSignal.m_scope">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCScopeSignal.createScopeSignal(System.Int32)">
            <summary>
            
            </summary>
            <param name="sigId"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCScopeSignal.createScopeSignal(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sigId"></param>
            <param name="refresh"></param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal">
            <summary>
            Represents an xPC target host scope signal for an xPC Target host scope <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScope"/>
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal.HostScopeSignalDataObject">
            <summary>
            Gets the data object <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataHostScSignalObject"/> associated to this <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal"/>object
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCHostScopeSignal.Scope">
            <summary>
            Gets the parent Host scope <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScope"/> object
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal">
            <summary>
            Represents an xPC target scope signal for an xPC Target target scope <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTargetScope"/>
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal.NumericalFormat">
            <summary>
            Gets and sets the numerical format for the numerical displayed signal associated with this object
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTgtScopeSignal.Scope">
            <summary>
            Gets the parent target scope <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTargetScope"/> object 
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal">
            <summary>
            Represents an xPC target file scope signal for an xPC Target file scope <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTargetScope"/>
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal.Scope">
            <summary>
            Gets the parent file scope <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScope"/> object 
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal.FileScopeSignalDataObject">
            <summary>
            Gets the data object <see cref="T:MathWorks.xPCTarget.FrameWork.xPCDataFileScSignalObject"/> associated with this <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeSignal"/>object
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCScopeSignalCollectionEventArgs">
            <summary>
            Provides data for an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCHostScopeCollection"/>, <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileScopeCollection"/>, <see cref="T:MathWorks.xPCTarget.FrameWork.xPCTargetScopeCollection"/>Added event
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCScopeSignalCollectionEventArgs.#ctor(MathWorks.xPCTarget.FrameWork.xPCScope,MathWorks.xPCTarget.FrameWork.xPCSignal)">
            <summary>
            Initializes a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCScopeSignalCollectionEventArgs"/>
            </summary>
            <param name="sc">An instance to the parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCScope"/> object</param>
            <param name="signal">An instance to the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> object</param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScopeSignalCollectionEventArgs.Signal">
            <summary>
            Gets the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCSignal"/> object added to the collection
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCScopeSignalCollectionEventArgs.Scope">
            <summary>
            Gets the parent <see cref="T:MathWorks.xPCTarget.FrameWork.xPCScope"/> object
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.xPCTargetPC">
            <summary>
            Provides client connection to a remote Target PC and exposes a great deal of information 
            about the xPC Target session. It provides many members that will be crucial to accessing
            information and manipulating the behavior of target PC.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.tcpPing">
            <summary>
            Allows an application to determine whether a remote computer is accessible over the TCP/IP network
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Connect">
            <summary>
            Establishes a connection to a remote target PC.  
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.ConnectAsync">
            <summary>
            Begins an asynchronous request to establish connection to a remote target PC .
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when this method is used by another thread.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Disconnect">
            <summary>
            Closes the connection.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.DisconnectAsync">
            <summary>
            Begins an asynchronous request to disconnect from a remote target PC.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when this method is used by another thread.</exception>        
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Reboot">
            <summary>
            Reboot the target PC
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Reboot(System.Int32)">
            <summary>
            Reboot the target PC
            </summary>
            <param name="timeout">Maximum amount of time in seconds to wait before this method returns.</param>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.RebootAsync">
            <summary>
            Begins an asynchronous request to reboot the target PC.        
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when this method is used by another thread.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Ping">
            <summary>
            Ping the Target PC
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Load">
            <summary>
            Load target application onto target PC.
            </summary>
            <returns>xPCApplication</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
            <exception cref="T:System.InvalidOperationException"> DLMFileName is a null reference (Nothing in Visual Basic) or an emtpy string</exception>
            <exception cref="T:System.Security.SecurityException"> The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException"> The file name is empty, contains only white spaces, or contains invalid characters. </exception>
            <exception cref="T:System.UnauthorizedAccessException">Access to DLMFileName is denied. </exception>
            <exception cref="T:System.IO.PathTooLongException"> The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 
            characters. </exception>
            <exception cref="T:System.NotSupportedException">DLMFileName contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Load(System.String)">
            <summary>
            Sets the DLMFileName to the specified URL and loads target application onto the target PC.
            </summary>
            <param name="dlmFileName">The path of xPC target dlm application to load onto the target PC</param>
            <returns>xPCApplication</returns>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
            <exception cref="T:System.InvalidOperationException"> cref="DLMFILEName"  DLMFileName is a null reference (Nothing in Visual Basic) or an emtpy string</exception>
            <exception cref="T:System.Security.SecurityException"> The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException"> The file name is empty, contains only white spaces, or contains invalid characters. </exception>
            <exception cref="T:System.UnauthorizedAccessException">Access to DLMFileName is denied. </exception>
            <exception cref="T:System.IO.PathTooLongException"> The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 
            characters. </exception>
            <exception cref="T:System.NotSupportedException">DLMFileName contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.LoadAsync">
             <summary>
             Begins an asynchronous request for loading target application onto target PC.
             </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when this method is used by another thread.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Unload">
            <summary>
             Unload target application from the target PC.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.UnloadAsync">
             <summary>
             Begins an asynchronous request for unloading target application onto target PC.
             </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when this method is used by another thread.</exception>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Dispose">
            <summary> 
            Releases all resources.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.#ctor">
            <summary>
            Initializes a new instance of the xPCTargetPC class.
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the xPCTargetPC class.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.GetService(System.Type)">
            <summary>
            Returns an object that represents a service provided by the Component or by its Container.
            </summary>
            <param name="serviceType">A service provided by the Component.</param>
            <returns></returns>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Connecting">
            <summary>
            Occurs before a connection is established.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Connected">
            <summary>
            Occurs after a connection is established.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Disconnecting">
            <summary>
            Occurs before disconnecting of an established connection
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Disconnected">
            <summary>
            Occurs after disconnecting of an established connection
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Loading">
            <summary>
            Occurs before an application is loaded onto the Target PC
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Loaded">
            <summary>
            Occurs after an application is loaded onto the Target PC
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Unloading">
            <summary>
            Occurs before an application is unloaded from the Target PC
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Unloaded">
            <summary>
            Occurs after an application is unloaded from the Target PC
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Rebooting">
            <summary>
            Occurs before target PC reboots
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Rebooted">
            <summary>
            Occurs after target PC reboots
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.ConnectCompleted">
            <summary>
            Occurs when an asynchronous connect operation completes.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.DisconnectCompleted">
            <summary>
            Occurs when an asynchronous disconnect operation completes.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.LoadCompleted">
            <summary>
            Occurs when an asynchronous load operation completes.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.UnloadCompleted">
            <summary>
            Occurs when an asynchronous unload operation completes.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.RebootCompleted">
            <summary>
            Occurs when an asynchronous reboot operation completes.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.TargetPCName">
            <summary>
            Gets or sets a value indicating the Target PC Name associating the Target PC.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.HostTargetComm">
            <summary>
            Gets or sets the physical medium used for communication.
            </summary>
            <value>
            <c><see cref="T:MathWorks.xPCTarget.FrameWork.XPCProtocol"/>.RS232</c> For serial communication; otherwise, <c><see cref="T:MathWorks.xPCTarget.FrameWork.XPCProtocol"/>.TCPIP</c>.
            </value>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.TcpIpTargetAddress">
            <summary>
            Gets or sets a valid IP address for your target PC.
            </summary>
            <value>
            <c>"xxx.xxx.xxx.xxx"</c> For example, <c>"192.168.0.10".</c>.
            </value>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.TcpIpTargetPort">
            <summary>
            Gets or sets the TcpIp Target Port. This property is set by default to 22222 and 
            should not cause any problems. The number is higher than the reserved area 
            (telnet, ftp, ...) and it is only of use on the target PC.
            </summary>
            <value>
            <c>"xxxxx"</c> For example, <c>"22222".</c>.
            </value>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.RS232HostPort">
            <summary>
            Gets or sets the Serial COM Port for the connection on the host computer. 
            The xPC Target software automatically determines the COM port on the target PC.
            </summary>
            <value>
            <c>COM0</c> or, <c>COM1</c>.
            </value>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.RS232Baudrate">
            <summary>
            Gets or sets the Baud Rate for the Serial connection. 
            </summary>
            <value>
            <c>BAUD115200</c>,<c>BAUD57600</c>,<c>BAUD38400</c>,<c>BAUD19200</c>,<c>BAUD9600</c>,<c>BAUD2400</c>,or<c>BAUD1200</c> 
            </value>        
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.DLMFileName">
            <summary>
            Gets or sets the full path to the dlm file name.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.IsConnected">
            <summary>
             Gets whether a connection is established to a remote target PC.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Echo">
            <summary>
             Gets or sets the target display on the remote target PC.
            </summary>
            <value>
            <c>true</c>, or <c>false</c>
            </value>  
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong.
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.CommunicationTimeOut">
            <summary>
            Gets or set the communication timeout in seconds.
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong. 
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.SessionTime">
            <summary>
            Gets the length of time xPC Target kernel has been running on the remote target PC.       
            </summary>
            <exception cref="T:MathWorks.xPCTarget.FrameWork.xPCException">Throws an exception when something goes wrong. 
            Query the Reason Property to identify the exact error.</exception>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Application">
            <summary>
            Gets a reference to an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCApplication"/> object that can be used to interface with the current
            target application loaded onto the target PC. If no communication is established, a null 
            object is returned.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.FileSystem">
            <summary>
            Gets a reference to an <see cref="T:MathWorks.xPCTarget.FrameWork.xPCFileSystem"/> object that can be used to interface with the 
            target's file system. If no communication is established, a null oject is returned.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.IsConnectingBusy">
            <summary>
            Gets whether a ConnectAsync request is in progress.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.IsDisconnectingBusy">
            <summary>
             Gets whether a DisconnectAsync request is in progress.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.IsLoadingBusy">
            <summary>
             Gets whether a LoadAsync request is in progress.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.IsUnloadingBusy">
            <summary>
             Gets whether a unLoadingAsync request is in progress.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.IsRebootingBusy">
            <summary>
             Gets whether a RebootAsync request is in progress.
            </summary>
        </member>
        <member name="E:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Disposed">
            <summary>
            Occurs when the component is disposed by a call to the <see cref="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Dispose"/> method.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Site">
            <summary>
            Gets or sets the site of the control.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.ContainerControl">
            <summary>
            Provides focus-management functionality for controls that can function as a container for other controls.
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Component">
            <summary>
            Gets the component associated with the ISite when implemented by a class
            </summary>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.xPCTargetPC.Container">
            <summary>
            Gets the IContainer associated with the ISite when implemented by a class
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.DisconnectCompletedEventHandler">
            <summary>
            Represents the method that will handle the cref = "DisconnectCompleted" event of a cref = "xPCTargetPC".
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.ConnectCompletedEventHandler">
            <summary>
            Represents the method that will handle the cref = "ConnectCompleted" event of a cref = "xPCTargetPC".
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.LoadCompletedEventHandler">
            <summary>
            Represents the method that will handle the cref = "LoadCompleted" event of a cref = "xPCTargetPC".
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.UnloadCompletedEventHandler">
            <summary>
             Represents the method that will handle the cref = "UnloadCompleted" event of a cref = "xPCTargetPC".
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.RebootCompletedEventHandler">
            <summary>
             Represents the method that will handle the cref = "RebootCompleted" event of a cref = "xPCTargetPC".
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.ConnectCompletedEventArgs">
            <summary>
            Provides data for the ConnectCompleted event
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.ConnectCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.ConnectCompletedEventArgs"/>
            </summary>
            <param name="e">ny error that occurred during the asynchronous operation</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="userstate">The optional user-supplied state object passed to the  <see cref="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.ConnectAsync"/></param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.DisconnectCompletedEventArgs">
            <summary>
            Provides data for the DisconnectCompleted event
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.DisconnectCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.DisconnectCompletedEventArgs"/>
            </summary>
            <param name="e">Any error that occurred during the asynchronous operation</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="userstate">The optional user-supplied state object passed to the  <see cref="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.DisconnectAsync"/></param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.LoadCompletedEventArgs">
            <summary>
            Provides data for the LoadCompleted event
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.LoadCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,MathWorks.xPCTarget.FrameWork.xPCApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:MathWorks.xPCTarget.FrameWork.LoadCompletedEventArgs"/>
            </summary>
            <param name="e">Any error that occurred during the asynchronous operation</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="userstate">The optional user-supplied state object passed to the  <see cref="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.LoadAsync"/></param>
            <param name="tg">A reference to the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCApplication"/> object</param>
        </member>
        <member name="P:MathWorks.xPCTarget.FrameWork.LoadCompletedEventArgs.Application">
            <summary>
            Gets a reference to the xPCApplication object
            </summary>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.UnloadCompletedEventArgs">
            <summary>
            Provides data for the UnloadCompleted event
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.UnloadCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,MathWorks.xPCTarget.FrameWork.xPCApplication)">
            <summary>
            Initializes a new instance of the cref = "UnloadCompletedEventArgs" class.
            </summary>
            <param name="e">Any error that occurred during the asynchronous operation</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="userstate">The optional user-supplied state object passed to the  <see cref="M:MathWorks.xPCTarget.FrameWork.xPCTargetPC.UnloadAsync"/></param>
            <param name="application">A reference to the <see cref="T:MathWorks.xPCTarget.FrameWork.xPCApplication"/> object</param>
        </member>
        <member name="T:MathWorks.xPCTarget.FrameWork.RebootCompletedEventArgs">
            <summary>
            Provides data for the RebootCompleted event
            </summary>
        </member>
        <member name="M:MathWorks.xPCTarget.FrameWork.RebootCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,MathWorks.xPCTarget.FrameWork.xPCTargetPC)">
            <summary>
            Initializes a new instance of the cref = "RebootCompletedEventArgs" class.
            </summary>
            <param name="e">Any error that occurred during the asynchronous operation</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="userstate">The optional user-supplied state object passed to the cref = "RebootAsync" method</param>
            <param name="tgpc">A reference to the xPCTargetPC object</param>
        </member>
    </members>
</doc>
